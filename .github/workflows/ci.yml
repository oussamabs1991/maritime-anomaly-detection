name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.9"
  CACHE_VERSION: v1

jobs:
  # Code quality and testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libspatialindex-dev libgeos-dev libproj-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist

    - name: Install package in editable mode
      run: |
        pip install -e .
        pip list | grep maritime
        python -c "import maritime_anomaly_detection; print('Package installed successfully')" || echo "Package import failed"

    - name: Verify package installation
      run: |
        python -c "import sys; print('Python version:', sys.version)"
        python -c "import os; print('Working directory:', os.getcwd())"
        python -c "import os; print('Directory contents:', os.listdir('.'))"
        python -c "import os; print('Src exists:', os.path.exists('src'))"
        python test_package_structure.py
        python test_smoke_imports.py

    - name: Run smoke tests
      run: |
        python main.py --smoke-tests-only
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Code quality checks
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy bandit safety
        pip install -r requirements.txt
        
    - name: Run black
      run: black --check --line-length=100 src/ tests/ main.py
      
    - name: Run isort
      run: isort --check-only --profile black --line-length=100 src/ tests/ main.py
      
    - name: Run flake8
      run: flake8 src/ tests/ main.py --max-line-length=100 --extend-ignore=E203,W503
      
    - name: Run mypy
      run: mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # MyPy can be strict, make non-blocking
      
    - name: Run bandit security check
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Run safety check
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Integration tests with synthetic data
  integration-test:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libspatialindex-dev libgeos-dev libproj-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: Create synthetic test data
      run: |
        make simulate-data
        
    - name: Run integration test with synthetic data
      run: |
        python main.py --zip-file data/raw/synthetic_ais_data.zip --csv-name synthetic_ais_data.csv --test-mode --log-level DEBUG
        
    - name: Check outputs
      run: |
        ls -la data/models/
        ls -la plots/
        test -f data/models/ensemble_model.joblib

  # Docker build and test
  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: maritime-anomaly-detection:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm maritime-anomaly-detection:test python main.py --smoke-tests-only

  # Performance benchmarking
  benchmark:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libspatialindex-dev libgeos-dev libproj-dev
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler pytest-benchmark
        pip install -e .
        
    - name: Run performance benchmark
      run: |
        make simulate-data
        /usr/bin/time -v python main.py --zip-file data/raw/synthetic_ais_data.zip --csv-name synthetic_ais_data.csv --test-mode 2> performance.log
        
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance.log

  # Documentation build
  docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser
        pip install -r requirements.txt
        pip install -e .
        
    - name: Build documentation
      run: |
        mkdir -p docs
        sphinx-quickstart -q -p "Maritime Anomaly Detection" -a "Author" --ext-autodoc --ext-viewcode --makefile --no-batchfile docs
        cd docs && make html
        
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/

  # Security scanning
  security:
    permissions: # <-- ADD THIS BLOCK
      security-events: write
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Release and deployment
  release:
    runs-on: ubuntu-latest
    needs: [test, lint, integration-test, docker]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: python -m build
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      if: github.event_name == 'release'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/maritime-anomaly-detection:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/maritime-anomaly-detection:${{ github.event.release.tag_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Create GitHub release assets
      run: |
        cp dist/* .
        tar -czf maritime-anomaly-detection-${{ github.event.release.tag_name }}.tar.gz src/ main.py requirements.txt setup.py README.md
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.whl
          *.tar.gz
          maritime-anomaly-detection-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [test, lint, integration-test, docker]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' && needs.integration-test.result == 'success' }}
      run: echo "✅ All CI checks passed!"
      
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.integration-test.result == 'failure' }}
      run: echo "❌ Some CI checks failed!"